(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{311:function(t,e,a){"use strict";a.r(e);var s=a(14),n=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"updatequeue"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#updatequeue"}},[t._v("#")]),t._v(" updateQueue")]),t._v(" "),e("blockquote",[e("p",[t._v("主要代码再"),e("code",[t._v("ReactUpdateQueue.js")])])]),t._v(" "),e("p",[e("code",[t._v("updateQueue")]),t._v("是React中承载"),e("strong",[t._v("更新任务")]),t._v("的一个队列，所谓更新任务也就是"),e("code",[t._v("setState")]),t._v("和"),e("code",[t._v("forceUpdate")]),t._v("等API调用时会创建的一个"),e("code",[t._v("Update")]),t._v("对象，用于记录这次更新的发起者，更新的内容等。这里需要关注的是以下几个方法：")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("enqueueUpdate")])])]),t._v(" "),e("h1",{attrs:{id:"enqueueupdate"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#enqueueupdate"}},[t._v("#")]),t._v(" enqueueUpdate")]),t._v(" "),e("p",[t._v("要读懂这个方法，我们需要关注这个方法在什么时候会被调用：")]),t._v(" "),e("ul",[e("li",[t._v("在调用"),e("code",[t._v("setState")]),t._v("、"),e("code",[t._v("forceUpdate")]),t._v("等主动创建更新的API的时候")]),t._v(" "),e("li",[t._v("在"),e("code",[t._v("NewContext")]),t._v("中更新"),e("code",[t._v("context")]),t._v("的值的时候")]),t._v(" "),e("li",[t._v("在调用"),e("code",[t._v("ReactDOM.render")]),t._v("进行初次渲染的时候")]),t._v(" "),e("li",[t._v("在有错误被捕获的时候")])]),t._v(" "),e("p",[t._v("我们可以看到这些都是会影响我们的UI渲染的内容，同时就是他们都会创建"),e("code",[t._v("Update")]),t._v("对象。再根据函数定义我们可以看出来，他接受的两个参数：")]),t._v(" "),e("ul",[e("li",[t._v("Fiber")]),t._v(" "),e("li",[t._v("Update")])]),t._v(" "),e("p",[e("code",[t._v("Fiber")]),t._v("就是产生更新的节点，"),e("code",[t._v("Update")]),t._v("就是产生的更新对象，那么这个函数就很明确了：")]),t._v(" "),e("p",[e("strong",[t._v("用来把创建的更新记录在对应节点的Fiber对象上")])]),t._v(" "),e("p",[t._v("接下去我们再来看他的实现，就显得比较容易理解了：")]),t._v(" "),e("p",[e("code",[t._v("queue1")]),t._v("和"),e("code",[t._v("queue2")]),t._v("分别对应的是"),e("code",[t._v("current")]),t._v("和"),e("code",[t._v("workInProgress")]),t._v("对象上面的"),e("code",[t._v("queue")]),t._v("，根据这个函数的最终结果我们是可以得出一个结论的，那就是："),e("strong",[e("code",[t._v("current")]),t._v("和"),e("code",[t._v("workInProgress")]),t._v("上面的"),e("code",[t._v("queue")]),t._v("对象是不同的，但是他们记录的"),e("code",[t._v("update")]),t._v("链表是一样的")]),t._v("。为什么要这么做呢？因为后面我们讲到"),e("code",[t._v("Suspense")]),t._v("的时候，我们会讲到在React中更新任务是可以被挂起甚至被抛弃的，而在更新过程中我们又会修改"),e("code",[t._v("queue")]),t._v("对象，如果"),e("code",[t._v("current")]),t._v("和"),e("code",[t._v("workInProgress")]),t._v("引用的"),e("code",[t._v("queue")]),t._v("对象相同，**那么就会导致被舍弃的任务影响到正常的更新队列。**如果你目前无法理解这些，你现在只需要知道他们是两个不同的对象，但是新的"),e("code",[t._v("Update")]),t._v("都会放到这两个队列上就可以了。")]),t._v(" "),e("p",[t._v("而这个函数做的事情，就是获取"),e("code",[t._v("current")]),t._v("和"),e("code",[t._v("workInProgress")]),t._v("对象上的"),e("code",[t._v("queue")]),t._v("，然后把新的"),e("code",[t._v("Update")]),t._v("放到这两个"),e("code",[t._v("queue")]),t._v("的最后。")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" enqueueUpdate"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("State"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fiber"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Fiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("update")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Update"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("State"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Update queues are created lazily.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" alternate "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("alternate"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" queue1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" queue2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("alternate "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// There's only one fiber.")]),t._v("\n    queue1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("updateQueue"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    queue2 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("queue1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      queue1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("updateQueue "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("createUpdateQueue")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("memoizedState"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// There are two owners.")]),t._v("\n    queue1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("updateQueue"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    queue2 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" alternate"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("updateQueue"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("queue1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("queue2 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Neither fiber has an update queue. Create new ones.")]),t._v("\n        queue1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("updateQueue "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("createUpdateQueue")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("memoizedState"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        queue2 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" alternate"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("updateQueue "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("createUpdateQueue")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n          alternate"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("memoizedState"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Only one fiber has an update queue. Clone to create a new one.")]),t._v("\n        queue1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("updateQueue "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("cloneUpdateQueue")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("queue2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("queue2 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Only one fiber has an update queue. Clone to create a new one.")]),t._v("\n        queue2 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" alternate"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("updateQueue "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("cloneUpdateQueue")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("queue1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Both owners have an update queue.")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("queue2 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" queue1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" queue2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// There's only a single queue.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendUpdateToQueue")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("queue1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" update"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("queue1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastUpdate "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" queue2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastUpdate "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// One of the queues is not empty. We must add the update to both queues.")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendUpdateToQueue")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("queue1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" update"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendUpdateToQueue")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("queue2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" update"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendUpdateToQueue")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("queue1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" update"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// But we still need to update the `lastUpdate` pointer of queue2.")]),t._v("\n      queue2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastUpdate "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" update"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);