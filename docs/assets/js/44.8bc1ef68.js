(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{318:function(t,e,a){"use strict";a.r(e);var n=a(14),s=Object(n.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"什么是vue组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是vue组件"}},[t._v("#")]),t._v(" 什么是Vue组件？")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://cn.vuejs.org/v2/guide/components.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("组件 (Component) 是 Vue.js 最强大的功能之一。组件可以扩展 HTML 元素，封装可重用的代码。在较高层面上，组件是自定义元素，Vue.js 的编译器为它添加特殊功能。在有些情况下，组件也可以是原生 HTML 元素的形式，以 is 特性扩展。"),e("OutboundLink")],1)]),t._v(" "),e("br"),t._v(" "),e("br"),t._v(" "),e("h2",{attrs:{id:"vue组件间通信"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue组件间通信"}},[t._v("#")]),t._v(" Vue组件间通信")]),t._v(" "),e("h3",{attrs:{id:"父组件向子组件通信"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#父组件向子组件通信"}},[t._v("#")]),t._v(" 父组件向子组件通信")]),t._v(" "),e("h4",{attrs:{id:"方法一-props"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方法一-props"}},[t._v("#")]),t._v(" 方法一：props")]),t._v(" "),e("p",[t._v("使用"),e("a",{attrs:{href:"https://cn.vuejs.org/v2/guide/components.html#Prop",target:"_blank",rel:"noopener noreferrer"}},[t._v("props"),e("OutboundLink")],1),t._v("，父组件可以使用props向子组件传递数据。")]),t._v(" "),e("p",[t._v("父组件vue模板father.vue")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<template>\n    <child :msg=\"message\"></child>\n</template>\n\n<script>\n\nimport child from './child.vue';\n\nexport default {\n    components: {\n        child\n    },\n    data () {\n        return {\n            message: 'father message';\n        }\n    }\n}\n<\/script>\n")])])]),e("p",[t._v("子组件vue模板child.vue")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<template>\n    <div>{{msg}}</div>\n</template>\n\n<script>\nexport default {\n    props: {\n        msg: {\n            type: String,\n            required: true\n        }\n    }\n}\n<\/script>\n")])])]),e("br"),t._v(" "),e("h4",{attrs:{id:"方法二-使用-children"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方法二-使用-children"}},[t._v("#")]),t._v(" 方法二 使用$children")]),t._v(" "),e("p",[t._v("使用"),e("a",{attrs:{href:"https://cn.vuejs.org/v2/api/#vm-children",target:"_blank",rel:"noopener noreferrer"}},[t._v("$children"),e("OutboundLink")],1),t._v("可以在父组件中访问子组件。")]),t._v(" "),e("br"),t._v(" "),e("br"),t._v(" "),e("h3",{attrs:{id:"子组件向父组件通信"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#子组件向父组件通信"}},[t._v("#")]),t._v(" 子组件向父组件通信")]),t._v(" "),e("br"),t._v(" "),e("h4",{attrs:{id:"方法一-使用vue事件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方法一-使用vue事件"}},[t._v("#")]),t._v(" 方法一:使用"),e("a",{attrs:{href:"https://cn.vuejs.org/v2/guide/components.html#%E4%BD%BF%E7%94%A8-v-on-%E7%BB%91%E5%AE%9A%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6",target:"_blank",rel:"noopener noreferrer"}},[t._v("vue事件"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("父组件向子组件传递事件方法，子组件通过$emit触发事件，回调给父组件。")]),t._v(" "),e("p",[t._v("父组件vue模板father.vue")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<template>\n    <child @msgFunc=\"func\"></child>\n</template>\n\n<script>\n\nimport child from './child.vue';\n\nexport default {\n    components: {\n        child\n    },\n    methods: {\n        func (msg) {\n            console.log(msg);\n        }\n    }\n}\n<\/script>\n")])])]),e("p",[t._v("子组件vue模板child.vue")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<template>\n    <button @click=\"handleClick\">点我</button>\n</template>\n\n<script>\nexport default {\n    props: {\n        msg: {\n            type: String,\n            required: true\n        }\n    },\n    methods () {\n        handleClick () {\n            //........\n            this.$emit('msgFunc');\n        }\n    }\n}\n<\/script>\n")])])]),e("br"),t._v(" "),e("h4",{attrs:{id:"方法二-通过修改父组件传递的props来修改父组件数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方法二-通过修改父组件传递的props来修改父组件数据"}},[t._v("#")]),t._v(" 方法二： 通过修改父组件传递的props来修改父组件数据")]),t._v(" "),e("p",[t._v("这种方法只能在父组件传递一个引用变量时可以使用，字面变量无法达到相应效果。因为引用变量最终无论是父组件中的数据还是子组件得到的props中的数据都是指向同一块内存地址，所以修改了子组件中props的数据即修改了父组件的数据。")]),t._v(" "),e("p",[t._v("但是并不推荐这么做，并不建议直接修改props的值，如果数据是用于显示修改的，在实际开发中我经常会将其放入data中，在需要回传给父组件的时候再用事件回传数据。这样做保持了组件独立以及解耦，不会因为使用同一份数据而导致数据流异常混乱，只通过特定的接口传递数据来达到修改数据的目的，而内部数据状态由专门的data负责管理。")]),t._v(" "),e("br"),t._v(" "),e("h4",{attrs:{id:"方法三-使用-parent"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方法三-使用-parent"}},[t._v("#")]),t._v(" 方法三：使用$parent")]),t._v(" "),e("p",[t._v("使用"),e("a",{attrs:{href:"https://cn.vuejs.org/v2/api/#vm-parent",target:"_blank",rel:"noopener noreferrer"}},[t._v("$parent"),e("OutboundLink")],1),t._v("可以访问父组件的数据。")]),t._v(" "),e("br"),t._v(" "),e("br"),t._v(" "),e("h3",{attrs:{id:"非父子组件、兄弟组件之间的数据传递"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#非父子组件、兄弟组件之间的数据传递"}},[t._v("#")]),t._v(" 非父子组件、兄弟组件之间的数据传递")]),t._v(" "),e("p",[t._v("非父子组件通信，Vue官方推荐"),e("a",{attrs:{href:"https://cn.vuejs.org/v2/guide/components.html#%E9%9D%9E%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1",target:"_blank",rel:"noopener noreferrer"}},[t._v("使用一个Vue实例作为中央事件总线"),e("OutboundLink")],1),t._v("。")]),t._v(" "),e("p",[t._v("Vue内部有一个事件机制，可以参考"),e("a",{attrs:{href:"https://github.com/vuejs/vue/blob/dev/src/core/instance/events.js",target:"_blank",rel:"noopener noreferrer"}},[t._v("源码"),e("OutboundLink")],1),t._v("。")]),t._v(" "),e("p",[t._v("$on方法用来监听一个事件。")]),t._v(" "),e("p",[t._v("$emit用来触发一个事件。")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*新建一个Vue实例作为中央事件总线*/")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" event "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Vue")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*监听事件*/")]),t._v("\nevent"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("$on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'eventName'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("val")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//......do something")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*触发事件*/")]),t._v("\nevent"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("$emit")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'eventName'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'this is a message.'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("br"),t._v(" "),e("br"),t._v(" "),e("h3",{attrs:{id:"多层级父子组件通信"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多层级父子组件通信"}},[t._v("#")]),t._v(" 多层级父子组件通信：")]),t._v(" "),e("p",[t._v("在Vue1.0中实现了$broadcast与$dispatch两个方法用来向子组件（或父组件）广播（或派发），当子组件（或父组件）上监听了事件并返回true的时候会向爷孙级组件继续广播（或派发）事件。但是这个方法在Vue2.0里面已经被移除了。")]),t._v(" "),e("p",[t._v("之前在学习饿了么的开源组件库"),e("a",{attrs:{href:"https://github.com/ElemeFE/element",target:"_blank",rel:"noopener noreferrer"}},[t._v("element"),e("OutboundLink")],1),t._v("的时候发现他们重新实现了broadcast以及dispatch的方法，以mixin的方式引入，具体可以参考"),e("a",{attrs:{href:"https://github.com/answershuto/learnVue/blob/master/docs/%E8%AF%B4%E8%AF%B4element%E7%BB%84%E4%BB%B6%E5%BA%93broadcast%E4%B8%8Edispatch.MarkDown",target:"_blank",rel:"noopener noreferrer"}},[t._v("《说说element组件库broadcast与dispatch》"),e("OutboundLink")],1),t._v("。但是跟Vue1.0的两个方法实现有略微的不同。这两个方法实现了向子孙组件事件广播以及向多层级父组件事件派发的功能。但是并非广义上的事件广播，它需要指定一个commentName进行向指定组件名组件定向广播（派发）事件。")]),t._v(" "),e("p",[t._v("其实这两个方法内部实现还是用到的还是$parent以及$children，用以遍历子节点或是逐级向上查询父节点，访问到指定组件名的时候，调用$emit触发指定事件。")]),t._v(" "),e("br"),t._v(" "),e("br"),t._v(" "),e("h3",{attrs:{id:"复杂的单页应用数据管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#复杂的单页应用数据管理"}},[t._v("#")]),t._v(" 复杂的单页应用数据管理")]),t._v(" "),e("p",[t._v("当应用足够复杂情况下，请使用"),e("a",{attrs:{href:"https://cn.vuejs.org/v2/guide/state-management.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("vuex"),e("OutboundLink")],1),t._v("进行数据管理。")])])}),[],!1,null,null,null);e.default=s.exports}}]);